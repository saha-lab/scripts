# Combine selfies and rotation batches
files <- c(files_rot, files_self)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_1", "S18_Sib_2")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond, batch = batch, fileName = files)
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24),]
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
# Get rotation batch files and remove the outlier previously identified: 160728_S18_12C_5 (which goes by sample name S18_12C_4)
files_rot <- list.files("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Rotations_Batch/Stage_18", recursive = TRUE, full.name=TRUE)
remove <- "/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Rotations_Batch/Stage_18/S18_12C/160728_S18_12C_5.bam_sorted.bam_htseq_out.txt"
files_rot <- setdiff(files_rot, remove)
# Get selfies batch files
files_self <- list.files("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Selfies_Batch/Stage_18", recursive = TRUE, full.name=TRUE)
# Combine selfies and rotation batches
files <- c(files_rot, files_self)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_1", "S18_Sib_2")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(fileName = files, sampleName = sampNum, condition = cond, batch = batch)
sva <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_batch_correction_covariates.csv")
sTable$SV1 <- sva[,1]
sTable$SV2 <- sva[,2]
sTable$SV3 <- sva[,3]
sTable$SV4 <- sva[,4]
sTable$SV5 <- sva[,5]
sTable$SV6 <- sva[,6]
sTable$SV7 <- sva[,7]
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + batch + condition
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24),]
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
temp_sTable
# Get rotation batch files and remove the outlier previously identified: 160728_S18_12C_5 (which goes by sample name S18_12C_4)
files_rot <- list.files("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Rotations_Batch/Stage_18", recursive = TRUE, full.name=TRUE)
remove <- "/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Rotations_Batch/Stage_18/S18_12C/160728_S18_12C_5.bam_sorted.bam_htseq_out.txt"
files_rot <- setdiff(files_rot, remove)
# Get selfies batch files
files_self <- list.files("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Selfies_Batch/Stage_18", recursive = TRUE, full.name=TRUE)
# Combine selfies and rotation batches
files <- c(files_rot, files_self)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_1", "S18_Sib_2")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, fileName = files, condition = cond, batch = batch)
sva <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_batch_correction_covariates.csv")
sTable$SV1 <- sva[,1]
sTable$SV2 <- sva[,2]
sTable$SV3 <- sva[,3]
sTable$SV4 <- sva[,4]
sTable$SV5 <- sva[,5]
sTable$SV6 <- sva[,6]
sTable$SV7 <- sva[,7]
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + batch + condition
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24),]
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
sTable
temp_sTable
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24),]
# the design here does not need to include the batch covariaates, since these are both rotation samples
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + condition
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# run model
dds18 <- DESeq(dds18, test = "LRT", full = ~condition, reduced = ~1)
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24),]
# the design here does not need to include the batch covariaates, since these are both rotation samples
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + condition
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# run model
dds18 <- DESeq(dds18, test = "LRT", full = design, reduced = ~1)
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24),]
# the design here does not need to include the batch covariaates, since these are both rotation samples
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + condition
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# filter row average is at least 5 counts
dds18 <- dds18[rowMeans(counts(dds18)) >= 5,]
# run model
dds18 <- DESeq(dds18, test = "LRT", full = design, reduced = ~1)
resultsNames(dds18)
res <- results(dds18, alpha = 0.05, contrast = c("condition", "18_11C", "18_Sib"))
hist(res$pvalue, main = "Sib vs 11C stage 18", xlab = "p-values", col = "lavender")
summary(res)
#writeOutput(res, dds18, "stage18", c("Sib", "11C"), dir)
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24, 34:36),]
# the design here does not need to include the batch covariaates, since these are both rotation samples
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + batch + condition
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
temp_sTable
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24, 35:36),]
# the design here does not need to include the batch covariaates, since these are both rotation samples
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + batch + condition
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
# Get rotation batch files and remove the outlier previously identified: 160728_S18_12C_5 (which goes by sample name S18_12C_4)
files_rot <- list.files("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Rotations_Batch/Stage_18", recursive = TRUE, full.name=TRUE)
remove <- "/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Rotations_Batch/Stage_18/S18_12C/160728_S18_12C_5.bam_sorted.bam_htseq_out.txt"
files_rot <- setdiff(files_rot, remove)
# Get selfies batch files
files_self <- list.files("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/Selfies_Batch/Stage_18", recursive = TRUE, full.name=TRUE)
# Combine selfies and rotation batches
files <- c(files_rot, files_self)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, fileName = files, condition = cond, batch = batch)
sva <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_batch_correction_covariates.csv")
sTable$SV1 <- sva[,1]
sTable$SV2 <- sva[,2]
sTable$SV3 <- sva[,3]
sTable$SV4 <- sva[,4]
sTable$SV5 <- sva[,5]
sTable$SV6 <- sva[,6]
sTable$SV7 <- sva[,7]
# subsetting samples of interest
temp_sTable <- sTable[c(1:5, 20:24, 35:36),]
# the design here does not need to include the batch covariaates, since these are both rotation samples
design <- ~ SV1 + SV2 + SV3 + SV4 + SV5 + SV6 + SV7 + batch + condition
dds18 <- DESeqDataSetFromHTSeqCount(sampleTable = temp_sTable, directory = "", design = design)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# filter row average is at least 5 counts
dds18 <- dds18[rowMeans(counts(dds18)) >= 5,]
# run model
dds18 <- DESeq(dds18, test = "LRT", full = design, reduced = ~1)
res <- results(dds18, alpha = 0.05, contrast = c("condition", "18_11C", "18_Sib"))
hist(res$pvalue, main = "Sib vs 11C stage 18", xlab = "p-values", col = "lavender")
summary(res)
#writeOutput(res, dds18, "stage18", c("Sib", "11C"), dir)
vsd <- vst(dds18, blind=FALSE)
rld <- rlog(dds18, blind=FALSE)
ntd <- normTransform(dds18)
library("vsn")
meanSdPlot(assay(ntd))
meanSdPlot(assay(vsd))
meanSdPlot(assay(rld))
PCA_null <- PCAPlotter(500, vsd)
PCA_null <- PCAPlotter(1000, vsd)
PCA_null <- PCAPlotter(5000, vsd)
PCA_null <- PCAPlotter(10000, vsd)
PCA_null <- PCAPlotter(30000, vsd)
# load the normalized count table which has already accounted for batch effects
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv")
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, fileName = files, condition = cond)
dds <- DESeqDataSetFromMatrix(countData = count_table, colData = sTable, design = ~batch + condition)
?DESeqDataSetFromMatrix
count_table
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
colnames(count_table)
sTable
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv")
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
row.names=colnames(count_table)
colnames(count_table)
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv")
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
row.names=colnames(count_table)
row.names <- row.names[2:37]
row.names
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=row.names))
suppressMessages(library(RUVSeq))
suppressMessages(library("ggplot2"))
suppressMessages(library(ggrepel))
suppressMessages(library(factoextra))
suppressMessages(library(FactoMineR))
suppressMessages(library(genefilter))
# load data
countData <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Stage18_APR_counts_no_outliers.csv", row.names = 1, header= TRUE)
# get number of genes
oglen <- length(countData$S18_11C_1)
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv", row.names = 1, header= TRUE)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
dds <- DESeqDataSetFromMatrix(countData = counts(set), colData = pData(set), design = ~condition)
head(count_table)
?round
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv", row.names = 1, header= TRUE)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
# round counts
count_table <- round(count_table)
head(count_table)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
dds <- DESeqDataSetFromMatrix(countData = counts(set), colData = pData(set), design = ~condition)
sum(count_table < 0)
sum(count_table < 0)
has.neg <- apply(count_table, 1, function(row) any(row < 0))
which(has.neg)
count_table[84]
count_table[84,]
count_table[92,]
count_table[23981,]
sum(count_table < -1)
has.neg <- apply(count_table, 1, function(row) any(row < 0))
which(has.neg)
sum(count_table < -1)
has.neg <- apply(count_table, 1, function(row) any(row < 0))
length(which(has.neg))
# neagtive counts
sum(count_table < 0)
# negative counts below -1
sum(count_table < -1)
# indices of negative counts
has.neg <- apply(count_table, 1, function(row) any(row < 0))
which(has.neg)
# changing -1 counts to 0
count_table <- count_table[count_table == -1] <- 0
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv", row.names = 1, header= TRUE)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
# round counts
count_table <- round(count_table)
# neagtive counts
sum(count_table < 0)
# negative counts below -1
sum(count_table < -1)
# indices of negative counts
has.neg <- apply(count_table, 1, function(row) any(row < 0))
which(has.neg)
# changing -1 counts to 0
count_table <- count_table[count_table == -1] <- 0
# neagtive counts to make sure our change worked
sum(count_table < 0)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
head(count_table)
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv", row.names = 1, header= TRUE)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
# round counts
count_table <- round(count_table)
# neagtive counts
sum(count_table < 0)
# negative counts below -1
sum(count_table < -1)
# indices of negative counts
has.neg <- apply(count_table, 1, function(row) any(row < 0))
which(has.neg)
# changing -1 counts to 0
count_table <- count_table[count_table == -1,] <- 0
# load the normalized count table which has already accounted for batch effects and filtered
count_table <- read.csv("/Volumes/CaChannel/RNA_SEQ/Analysis/APRotations/Quantification/170802_HTSeq-count_Output_exon/All_counts/Batch_correction_counts/Stage18_APR_counts_no_outliers_batch_corrected.csv", row.names = 1, header= TRUE)
# sample name rotations
sampNum_rot = c("S18_11C_1","S18_11C_2","S18_11C_3","S18_11C_4","S18_11C_5","S18_11R_1","S18_11R_2","S18_11R_3","S18_11R_4","S18_11R_5","S18_12C_1","S18_12C_2","S18_12C_3","S18_12C_5","S18_12R_1","S18_12R_2","S18_12R_3","S18_12R_4","S18_12R_5","S18_Sib_1","S18_Sib_2","S18_Sib_3","S18_Sib_4","S18_Sib_5")
# sample name selfies
sampNum_self = c("S18_11S_1","S18_11S_2","S18_11S_3","S18_11S_4","S18_11S_5","S18_12S_1","S18_12S_2","S18_12S_3","S18_12S_4","S18_12S_5","S18_Sib_6", "S18_Sib_7")
# combine sample names
sampNum <- c(sampNum_rot, sampNum_self)
# condition rotations
cond = rep(c("18_11C", "18_11R"), each = 5)
cond = c(cond, rep(c("18_12C"), each = 4))
cond = c(cond, rep(c("18_12R", "18_Sib"), each = 5))
# condition selfies
cond = c(cond, rep(c("18_11S", "18_12S"), each = 5))
cond = c(cond, rep(c("18_Sib"), each = 2))
# batch
# batch <- as.factor(rep(c("Rotations", "Selfie"), c(24, 12)))
sTable = data.frame(sampleName = sampNum, condition = cond)
# round counts
count_table <- round(count_table)
# neagtive counts
sum(count_table < 0)
# negative counts below -1
sum(count_table < -1)
# indices of negative counts
has.neg <- apply(count_table, 1, function(row) any(row < 0))
which(has.neg)
# changing -1 counts to 0
count_table[count_table == -1] <- 0
# neagtive counts to make sure our change worked
sum(count_table < 0)
counts_table
head(count_table)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
dds <- DESeqDataSetFromMatrix(countData = counts(set), colData = pData(set), design = ~condition)
dds
pData(set)
set
set@assayData$counts
counts(set)
counts(set)[,c(1:5, 20:24, 35:36)]
pData(set)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
temp_counts <- counts(set)[,c(1:5, 20:24, 35:36)]
temp_colData <- pData(set)[c(1:5, 20:24, 35:36),]
dds <- DESeqDataSetFromMatrix(countData = counts(set), colData = pData(set), design = ~condition)
dds
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
temp_counts <- counts(set)[,c(1:5, 20:24, 35:36)]
temp_colData <- pData(set)[c(1:5, 20:24, 35:36),]
dds <- DESeqDataSetFromMatrix(countData = temp_counts, colData = temp_colData, design = ~condition)
dds
colData(dds)
set <- newSeqExpressionSet(as.matrix(count_table), phenoData = data.frame(sTable, row.names=colnames(count_table)))
temp_counts <- counts(set)[,c(1:5, 20:24, 35:36)]
temp_colData <- pData(set)[c(1:5, 20:24, 35:36),]
dds <- DESeqDataSetFromMatrix(countData = temp_counts, colData = temp_colData, design = ~condition)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# filter row average is at least 5 counts
dds18 <- dds18[rowMeans(counts(dds18)) >= 5,]
# run model
dds18 <- DESeq(dds18, test = "LRT", full = design, reduced = ~1)
res <- results(dds18, alpha = 0.05, contrast = c("condition", "18_11C", "18_Sib"))
hist(res$pvalue, main = "Sib vs 11C stage 18", xlab = "p-values", col = "lavender")
summary(res)
#writeOutput(res, dds18, "stage18", c("Sib", "11C"), dir)
temp_counts <- counts(set)[,c(1:5, 20:24, 35:36)]
temp_colData <- pData(set)[c(1:5, 20:24, 35:36),]
dds18 <- DESeqDataSetFromMatrix(countData = temp_counts, colData = temp_colData, design = ~condition)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# run model
dds18 <- DESeq(dds18, test = "LRT", full = design, reduced = ~1)
temp_counts <- counts(set)[,c(1:5, 20:24, 35:36)]
temp_colData <- pData(set)[c(1:5, 20:24, 35:36),]
dds18 <- DESeqDataSetFromMatrix(countData = temp_counts, colData = temp_colData, design = ~condition)
dds18$condition <- relevel(dds18$condition, ref="18_Sib")
# run model
dds18 <- DESeq(dds18, test = "LRT", full = ~condition, reduced = ~1)
res <- results(dds18, alpha = 0.05, contrast = c("condition", "18_11C", "18_Sib"))
hist(res$pvalue, main = "Sib vs 11C stage 18", xlab = "p-values", col = "lavender")
summary(res)
#writeOutput(res, dds18, "stage18", c("Sib", "11C"), dir)
vsd <- vst(dds18, blind=FALSE)
rld <- rlog(dds18, blind=FALSE)
ntd <- normTransform(dds18)
library("vsn")
meanSdPlot(assay(ntd))
meanSdPlot(assay(vsd))
meanSdPlot(assay(rld))
PCA_null <- PCAPlotter(500, vsd)
PCA_null <- PCAPlotter(1000, vsd)
PCA_null <- PCAPlotter(5000, vsd)
PCA_null <- PCAPlotter(10000, vsd)
PCA_null <- PCAPlotter(30000, vsd)
res <- results(dds18, alpha = 0.05, contrast = c("condition", "18_11C", "18_Sib"))
hist(res$pvalue, main = "Sib vs 11C stage 18", xlab = "p-values", col = "lavender")
summary(res)
#writeOutput(res, dds18, "stage18", c("Sib", "11C"), dir)
resOrdered <- res[order(res$padj),]
plotCounts(dds18, which.min(resOrdered$padj))
resOrdered
plotCounts(dds18, name = "osgin1.L|Xelaev18022482m"))
plotCounts(dds18, name = "osgin1.L|Xelaev18022482m")
plotCounts(dds18, gene = "osgin1.L|Xelaev18022482m")
plotCounts(dds18, row.names(resOrdered[25,]))
plotCounts(dds18, row.names(resOrdered[50,]))
plotCounts(dds18, row.names(resOrdered[100,]))
plotCounts(dds18, row.names(resOrdered[500,]))
